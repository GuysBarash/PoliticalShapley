# -*- coding: utf-8 -*-
"""knesset_scraping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16uArqMLEZt1mIPNlQ2F2qTd_bqN7V36O
"""

import re
import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup
from IPython.display import display, HTML

"""# Fetch All links of knesset links"""


def get_knessets_df(lists_of_knessets_url):
    knesset_df = pd.DataFrame(columns=['knesset_number', 'start_year', 'end_year', 'knesset_wiki'])
    wikilinks_base = 'https://en.wikipedia.org'
    website_url = requests.get(list_of_lists_url).text
    soup = BeautifulSoup(website_url, 'lxml')
    links = soup.find_all('a')
    for l in links:
        if l.has_attr('title'):
            if "List of members of the" in l.get('title'):
                content = l.contents[0]
                if re.search('[0-9]', content) is not None:
                    link = wikilinks_base + l.get('href')

                    numbers = re.findall('[0-9]+', content)
                    if len(numbers) < 3:
                        numbers += [numbers[-1]]
                    if len(numbers[-1]) == 2:
                        decade = numbers[1][:2]
                        full_year = decade + numbers[-1]
                        numbers[-1] = full_year
                    numbers = [int(n) for n in numbers]

                    knesset_df.loc[numbers[0]] = numbers + [link]
    return knesset_df


list_of_lists_url = r'https://en.wikipedia.org/wiki/Lists_of_Knesset_members'
df_list_of_knessets = get_knessets_df(list_of_lists_url)
display(df_list_of_knessets)

"""# For each knesset, get all members"""


def get_members_from_knesset_wiki(knesset_url, knessent_number):
    # Get base df
    dfs = pd.read_html(knesset_url, header=0)
    df = dfs[0]
    if 'Israel' in df.columns:
        df = dfs[1]

    for bad_col_names in ['MK', 'Name']:
        if bad_col_names in df.columns:
            df['Member'] = df[bad_col_names]
            df = df.drop(bad_col_names, axis=1)

    for bad_col_names in ['Party.1']:
        if bad_col_names in df.columns:
            df['Party'] = df[bad_col_names]
            df = df.drop(bad_col_names, axis=1)

    # get raw links
    website_url = requests.get(knesset_url).text
    soup = BeautifulSoup(website_url, 'lxml')
    My_table = soup.find('table')
    links = soup.findAll('a')
    sr_links = pd.Series()
    for l in links:
        if len(l.contents) > 0:
            superscript = '[⁰¹²³⁴⁵⁶⁷⁸⁹]'
            name = l.contents[0]
            name = re.sub(superscript, '', str(name))
            sr_links[name] = l.get('href')
    idx_to_links_sr = pd.Series(index=df.index)

    for r in df.iterrows():
        r_idx = r[0]
        name = r[1]['Member']
        superscript = '[⁰¹²³⁴⁵⁶⁷⁸⁹]'
        name = re.sub(superscript, '', str(name))
        link = sr_links[name]
        wikilinks_base = 'https://en.wikipedia.org'
        idx_to_links_sr[r_idx] = wikilinks_base + link

    # Remove mandats and notes from party name
    df['Party'] = df['Party'].apply(lambda s: re.sub('\s*\([0-9]+\)', '', s))
    df['Party'] = df['Party'].apply(lambda s: re.sub('\s*\[.*\]', '', s))

    # Update wikilinks
    df['wiki'] = idx_to_links_sr
    df['Knesset_number'] = knessent_number
    return df


knesset_dict = dict()
for r_idx, r in df_list_of_knessets.iterrows():
    print(f"Running on Knesset: {r_idx}")
    knesset_url = r['knesset_wiki']
    knesset_number = r['knesset_number']
    current_knesset_df = get_members_from_knesset_wiki(knesset_url, knesset_number)
    # display(current_knesset_df)
    knesset_dict[knesset_number] = current_knesset_df
    # if r_idx > 3:
    #   break

"""# Merge to one table"""

df = pd.concat(knesset_dict.values(), axis=0, ignore_index=True, sort=False)
display(df)

"""# Scrap personal details

Date of birth, gender
"""

import wptools

"""Fetch wikidata tokens"""

from datetime import datetime

wiki_data_tokens_by_wikipedias = pd.Series(index=list(df['wiki'].unique()), data='@')
for rowidx, member_link in enumerate(wiki_data_tokens_by_wikipedias.index):
    website_url = requests.get(member_link).text
    soup = BeautifulSoup(website_url, 'lxml')
    links = soup.findAll('a', href=True, text='Wikidata item')
    m = re.search('Q[0-9]+', links[0].get('href'))
    if m is not None:
        wikidata_id = m.group(0)
        wiki_data_tokens_by_wikipedias[member_link] = wikidata_id
        print(f"[{rowidx + 1 :>4}/{len(wiki_data_tokens_by_wikipedias)}]\t{wikidata_id}\t{member_link}")
    else:
        print(f"@ [{rowidx + 1 :>4}/{len(wiki_data_tokens_by_wikipedias)}][{member_name}]\t{'@'}\t{member_link}")
print("COMPLETED.")

"""fetch wikidata data"""
from wikidata.client import Client

politician_df = pd.DataFrame(index=wiki_data_tokens_by_wikipedias.index, columns=['token', 'gender',
                                                                                  'birth_year']
                             )

for row_idx, member_link in enumerate(politician_df.index):
    wikidata_client = Client()
    wikidata_id = wiki_data_tokens_by_wikipedias[member_link]
    entity = wikidata_client.get(wikidata_id, load=True)
    p = wikidata_client.get('P21')
    gender = str(entity[p].label)

    p = wikidata_client.get('P569')
    raw = entity.attributes.get('claims').get(p.id)
    raw.sort(key=lambda claim: claim['rank'], reverse=True)
    timeobj = [r for r in (r['mainsnak'] for r in raw)][0]['datavalue']
    year_of_birth = int(re.search('[0-9]{4}', timeobj['value']['time']).group(0))
    politician_df.loc[member_link, ['token', 'gender', 'birth_year']] = [wikidata_id,
                                                                         gender,
                                                                         year_of_birth]

    print(f"[{row_idx + 1:>4}/{len(politician_df)}][{member_link}]\t{gender}\t{year_of_birth}")

"""# Merge data from wikidata to df"""

df['gender'] = df['wiki'].map(politician_df['gender'])
df['wikidata_token'] = df['wiki'].map(politician_df['token'])
df['birth_year'] = df['wiki'].map(politician_df['birth_year'])
display(df)

"""# Data analysis example

Knesset ages
"""

knesets_idxs = list(df['Knesset_number'].unique())
for knesets_idx in knesets_idxs:
    current_knesset_start_year = df_list_of_knessets.loc[knesets_idx, 'start_year']
    relevant_members = df[df['Knesset_number'] == knesets_idx]['birth_year'].astype(int)
    ages = current_knesset_start_year - relevant_members
    ages_mean = ages.mean()
    ages_min = ages.min()
    ages_max = ages.max()
    df_list_of_knessets.loc[knesets_idx, 'Average age'] = ages_mean
    df_list_of_knessets.loc[knesets_idx, 'Min age'] = ages_min
    df_list_of_knessets.loc[knesets_idx, 'Max age'] = ages_max
    print(f"Knesset: {knesets_idx:>3}\tStart {current_knesset_start_year}\t Average age: {ages_mean}")

"""Create gender over knessets"""

knesset_gender_ratio = pd.Series(index=knesets_idxs)
for knesset_idx in knesets_idxs:
    gender_xdf = df[df.loc[:, 'Knesset_number'] == knesset_idx]['gender']
    gender_xdf = gender_xdf == 'female'
    ratio = 100 * gender_xdf.mean()
    knesset_gender_ratio[knesset_idx] = ratio
    print(f"Knesset: {knesset_idx:>3}\t female ratio: {ratio}")
df_list_of_knessets['Gender_ratio'] = knesset_gender_ratio

display(df_list_of_knessets)

import matplotlib as mpl
import matplotlib.pyplot as plt

plt.style.use('classic')

plt.ylim([0, 40])
plt.xticks(ticks=df_list_of_knessets.index)
plt.ylabel("% of woman in knesset")
plt.xlabel("knesset number")
df_list_of_knessets['Gender_ratio'].plot()

display(df_list_of_knessets)
plt.cla()
plt.ylim([20, 100])
plt.xticks(ticks=df_list_of_knessets.index)
plt.ylabel("Average age")
plt.xlabel("knesset number")
df_list_of_knessets['Average age'].plot()
df_list_of_knessets['Min age'].plot()
df_list_of_knessets['Max age'].plot()
plt.legend()

download = True
if download:
    from google.colab import files

    df_name = 'knesset_members_db.csv'
    df.to_csv(df_name)
    files.download(df_name)

    df_name = 'knesset_parliament_db.csv'
    df_list_of_knessets.to_csv(df_name)
    files.download(df_name)

"""Create knesset-to-year-index"""